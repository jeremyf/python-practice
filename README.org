#+TITLE: Python Pracitce

The purpose of this repository is for me to have a place where I’m practicing Python.

* System Installation

On Macos, I use the =brew= ecosystem.  I need some dependencies installed:

- =brew install python=
- =brew install uv= :: a Rust based package manager for Python.

* Emacs and Python
:PROPERTIES:
:ID:       40BD2EE0-878B-4902-BC1D-41993B3DE14B
:END:

I added the following to [[https://github.com/jeremyf/dotemacs][my Emacs configuration]]:

#+begin_src emacs-lisp
  (use-package python
    :straight (:type built-in)
    :hook (python-mode . jf/python-mode-configurator)
    :config
    (defun jf/python-mode-configurator ()
      (eldoc-mode t)
      (eglot-ensure)
      (python-docstring-mode t)
      (setq-default python-indent-offset 4)
      ;; I’m loving an 80 column fill…Why?  Because on my small computer I can
      ;; have 4 windows laid out in a quadrant and see all of the code/text.
      (setq-local fill-column 80)))

  ;; The treesit package of Emacs 29+ behaves a bit different.
  (add-hook 'python-ts-mode-hook #'jf/python-mode-configurator)

  ;; A Python syntax validator/linter.
  (use-package flymake-ruff
    :straight t
    :hook (eglot-managed-mode . flymake-ruff-load))

  ;; To provide some syntax highlighting of docstrings, and more.
  (use-package python-docstring
    :straight t)

  ;; To create narrowable groups
  (dolist (python '(python-mode python-ts-mode))
  (add-to-list 'consult-imenu-config
    `(,python
       :toplevel "Method"
       :types ((?f "Field" font-lock-variable-name-face)
                (?c "Class" font-lock-type-face)
                (?m "Method" font-lock-function-name-face)
                (?v "Variable" font-lock-variable-name-face)
                ))))
#+end_src

I started reading [[https://python-patterns.guide/][Brandon Rhodes’ Python Patterns]]; a dear friend with whom I have dinner and beers every Thursday evening.

With =python-mode= enabled, I typed =C-c C-c= and Emacs prompted me to start a Python process by typing =C-c C-p=.  I started the process, and went back to my Python code, then typed =C-c C-c= and the print statements were echoed to that Python process.  Super helpful for introspection.

I’m also considering installing [[https://github.com/Crandel/tempel-collection/tree/main][Crandel/tempel-collection: Collection tempel templates]]; there’s some templates for Python.  I’ve already found the occasional line ending in =:= is a bit jarring; it’s one of those “I definitely want a linter running to remind me of this missing value.”

* The Practice Files
:PROPERTIES:
:ID:       25089338-2095-4FEE-B006-53B7D24BA1EA
:END:

- [[./static-method.py][static-method.py]] :: Exploring the =@staticmethod= directive while also reviewing [[https://python-patterns.guide/gang-of-four/abstract-factory/][The Abstract Factory Pattern]].
- [[./introspection.py][introspection.py]] :: Exploring named parameters and object introspection.
- [[./iterator.py][iterator.py]] :: Exploring some of the iterators; though there are more reflections below.

** Iterator
:PROPERTIES:
:ID:       77C25B8E-F9C3-4198-A45C-E520D46C90BF
:END:

As I read [[https://python-patterns.guide/gang-of-four/iterator/][The Iterator Pattern]], I’m mapping these concepts to Ruby.

Below we map the symbols of elements with an atomic weight greater than 5.

#+begin_src python
  dictionary = {'H': 1.008, 'He': 4.003, 'Li': 6.94}
  list(symbol for symbol, weight in dictionary.items() if weight > 5)

  # Analogous to the above
  [symbol for symbol, weight in d.items() if weight > 5]
#+end_src

#+begin_src ruby
  dictionary = { H: 1.008, He: 4.003, Li: 6.94 }
  dictionary.each_with_object([]) { |(symbol, weight), array| array << symbol.to_s if weight > 5 }
#+end_src

Both return an =Array= of one element; namely =["Li"]=.  The syntax of Python takes a bit of adjustment, in part because I’m accustomed to Ruby’s idioms and syntax.

Stepping back a bit, the syntax of Python requires less conceptualization.  The three symbols: =[=, =symbol=, and =for= provide early indicators that I’m “Making an array of the “symbol” variable defined in the =for= loop.

The same applies with starting a dictionary.

Put another way, while I’m familiar with Ruby’s various iterator functions and their blocks, Python front-loads the “What is this object?”  Ruby says “Noun, verb, object” and Python says “Object, verb from noun.”

Though a letting local variable can also provide guidance on what the “map” is.
